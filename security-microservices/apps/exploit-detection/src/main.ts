import { NestFactory } from '@nestjs/core';
import { ConfigService } from '@nestjs/config';
import { ExploitDetectionModule } from './exploit-detection.module';
import { ExploitDetectionService } from './exploit-detection.service'; // Import your service
import { WinstonModule } from 'nest-winston';
import { instance } from '@app/common/logging/winston.logger';

async function bootstrap() {
  // Create the NestJS application instance using the ExploitDetectionModule
  const app = await NestFactory.create(ExploitDetectionModule, {
    // Use Winston for logging with a custom logger instance
    logger: WinstonModule.createLogger({
      instance: instance,
    }),
  });

  // Retrieve the ConfigService instance to access environment variables
  const configService = app.get(ConfigService);

  // Fetch configuration for the HTTP server (optional, if you decide to expose an HTTP endpoint)
  const host = configService.get<string>('EXPLOIT_DETECTION.HOST');
  const port = configService.get<number>('EXPLOIT_DETECTION.PORT');

  // Get the ExploitDetectionService instance to start monitoring for exploits
  const exploitDetectionService = app.get(ExploitDetectionService);

  // Start monitoring blockchain transactions for potential exploits
  await exploitDetectionService.monitor();

}

// Start the application by calling the bootstrap function
bootstrap();